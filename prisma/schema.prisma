// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum TaskType {
  TASK
  MILESTONE
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  FINISHED
  PENDING_REVIEW
  CHANGES_REQUESTED
  CLOSED
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum SenderType {
  USER
  CLIENT
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                     String        @id @default(cuid())
  name                   String?
  email                  String?       @unique
  emailVerified          DateTime?
  currentProjectId       String?
  image                  String?
  createdAt              DateTime      @default(now()) @map(name: "created_at")
  updatedAt              DateTime      @default(now()) @map(name: "updated_at")
  role                   UserRole      @default(USER)
  accounts               Account[]
  sessions               Session[]
  stripeCustomerId       String?       @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?       @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?       @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
  projects               UserProject[]
  notes                  Note[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model UserProject {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@map(name: "user_projects")
}

model ClientInvite {
  id        String           @id @default(cuid())
  email     String
  status    InvitationStatus @default(PENDING)
  projectId String
  Project   Project          @relation(fields: [projectId], references: [id])
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @default(now()) @map(name: "updated_at")

  @@map(name: "client_invites")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  image     String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  notes     Note[]

  @@map(name: "clients")
}

model Project {
  id                 String         @id @default(cuid())
  slug               String         @unique
  passCode           String
  name               String
  description        String?
  criteriaForSuccess String?        @db.Text
  visibility         Visibility     @default(PUBLIC)
  deadline           DateTime?
  color              String?
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime       @default(now()) @map(name: "updated_at")
  users              UserProject[]
  ClientInvites      ClientInvite[]
  clients            Client[]
  tasks              Task[]
  assets             Asset[]

  @@map(name: "projects")
}

model Asset {
  id           String    @id @default(cuid())
  projectId    String
  name         String
  url          String
  type         AssetType
  addWatermark Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @default(now()) @map(name: "updated_at")
  Project      Project   @relation(fields: [projectId], references: [id])
  Tasks        Task[]
  taskId       String?

  @@map(name: "assets")
}

model Task {
  id            String     @id @default(cuid())
  projectId     String
  name          String
  timeToDeliver Int?
  visibility    Visibility
  type          TaskType
  description   String?
  content       Json?
  status        TaskStatus @default(OPEN)
  reviewedAt    DateTime[]
  completedAt   DateTime?
  Assets        Asset[]
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")
  Project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  notes         Note[]

  @@map(name: "tasks")
}

model Note {
  id        String     @id @default(cuid())
  taskId    String
  userId    String?
  clientId  String?
  sender    SenderType
  content   String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  Task      Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  Client    Client?    @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@map(name: "notes")
}
