// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum State {
  Monastir
  Tunis
  Sfax
  Sousse
  Gabes
  Kairouan
  Kebili
  Kef
  Medenine
  Nabeul
  Mahdia
  Bizerte
  Gafsa
  Tozeur
  Tataouine
  Siliana
  Jendouba
  BenArous
  Manouba
  Kasserine
  Ariana
  Zaghouan
  SidiBouzid
  Beja
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  passwordResetToken     String?        @db.VarChar(255)
  password               String?
  image                  String?
  states                 State[]
  createdAt              DateTime       @default(now()) @map(name: "created_at")
  updatedAt              DateTime       @default(now()) @map(name: "updated_at")
  role                   UserRole       @default(USER)
  accounts               Account[]
  sessions               Session[]
  stripeCustomerId       String?        @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?        @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?        @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?      @map(name: "stripe_current_period_end")
  visits                 Visit[]
  plans                  Plan[]
  isBanned               Boolean        @default(false)
  isDeleted              Boolean        @default(false)
  Notification           Notification[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Pos {
  id          String   @id @default(cuid())
  state       State
  city        String
  zip         String
  lat         String
  lng         String
  nom         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  visits      Visit[]
  plans       Plan[]
}

enum CompanyType {
  COMPETITOR
  SUPPLIER
}

model Company {
  id        String      @id @default(cuid())
  name      String
  type      CompanyType
  code      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  products  Product[]
}

model Product {
  id              String          @id @default(cuid())
  name            String
  price           Float
  companyType     CompanyType
  companyId       String
  company         Company         @relation(fields: [companyId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  disponibilities Disponibility[]
}

model Visit {
  id              String          @id @default(cuid())
  validated       Boolean         @default(false)
  lat             String
  lng             String
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  posId           String
  pos             Pos             @relation(fields: [posId], references: [id])
  note            String?
  file            String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  disponibilities Disponibility[]
}

model Disponibility {
  id            String   @id @default(cuid())
  visitId       String
  visit         Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  disponibility Boolean  @default(false)
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Plan {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  posId     String
  isDone    Boolean  @default(false)
  pos       Pos      @relation(fields: [posId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  ADDED_VISIT
  ADDED_POS
}

model Notification {
  id          String           @id @default(cuid())
  message     String
  description String?
  type        NotificationType
  actionLink  String?
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}
