// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum invoiceStatus {
  PENDING
  PAID
  CANCELED
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String?    @unique
  emailVerified          DateTime?
  passwordResetToken     String?    @db.VarChar(255)
  password               String?
  image                  String?
  createdAt              DateTime   @default(now()) @map(name: "created_at")
  updatedAt              DateTime   @default(now()) @map(name: "updated_at")
  role                   UserRole   @default(USER)
  accounts               Account[]
  sessions               Session[]
  stripeCustomerId       String?    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?    @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?    @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map(name: "stripe_current_period_end")
  Seller                 Seller[]
  Invoice                Invoice[]
  Quote                  Quote[]
  Customer               Customer[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Seller {
  id        String    @id @default(uuid())
  name      String
  address   String
  phone     String?
  email     String?
  siret     String?   @unique
  vatNumber String?
  logo      String?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  quotes    Quote[]
}

model Customer {
  id       String    @id @default(uuid())
  name     String
  address  String
  siret    String?   @unique
  phone    String?
  email    String?
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[]
  quotes   Quote[]
}

model Invoice {
  id             String        @id @default(uuid())
  number         String
  date           DateTime
  seller         Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId       String
  customer       Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  items          Item[]
  subtotal       Float //prix ht
  vatRate        Float? //taux de tva
  vatAmount      Float? //montant de tva
  total          Float? //prix ttc
  paymentTerms   String?       @db.Text
  paymentDetails String?       @db.Text
  legalMentions  String?       @db.Text
  status         invoiceStatus @default(PENDING)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  viewd          Boolean?      @default(false)

  //settings
  vatActivated Boolean? @default(true) //tva activée
  vatPerItem   Boolean? @default(false) //tva par article
  devise       String?  @default("€") //devise
  showQuantity Boolean? @default(true) //afficher la quantité

  paymentDate DateTime?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Quote {
  id         String      @id @default(uuid())
  number     String
  date       DateTime
  validUntil DateTime
  seller     Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId   String
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  items      QuoteItem[]
  subtotal   Float
  vatRate    Float?
  vatAmount  Float?
  total      Float?
  terms      String?     @db.Text
  notes      String?     @db.Text
  status     QuoteStatus @default(PENDING)
  viewd      Boolean?    @default(false)
  comment    String?     @db.Text

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  //settings
  vatActivated Boolean? @default(true) //tva activée
  vatPerItem   Boolean? @default(false) //tva par article
  devise       String?  @default("€") //devise
  showQuantity Boolean? @default(true) //afficher la quantité

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          String  @id @default(uuid())
  name        String
  description String
  quantity    Int?
  unitPrice   Float
  totalPrice  Float
  totalVat    Float?
  vatRate     Float?
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
}

model QuoteItem {
  id          String @id @default(uuid())
  name        String
  description String
  quantity    Int?
  unitPrice   Float
  totalPrice  Float
  totalVat    Float?
  vatRate     Float?
  quote       Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
}

model newsLetter {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  email      String
  entreprise String?
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
